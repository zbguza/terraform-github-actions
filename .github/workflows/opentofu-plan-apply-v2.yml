name: 'OpenTofu Infrastructure Plan/Apply'
run-name: 'Deploy/Update infrastructure | ${{ inputs.stage }} | ${{ inputs.tofu_action }}'
on:
  push: # For full deployments
    branches:
      - develop
    paths:
      - v2/**
  workflow_dispatch:
    inputs:
      auto_approve:
        description: "Auto-approve the OpenTofu apply"
        required: true
        default: false
        type: boolean
      stage:
        required: true
        description: Stage
        type: choice
        options:
          - 'dev'
          - 'qa'
          - 'prd'
      tofu_action:
        required: true
        description: OpenTofu action
        type: choice
        options:
          - "plan"
          - "apply"

# concurrency:
#   # Cancel in-progress deploys to the same branch
#   group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: read
  pull-requests: write
  id-token: write # This is required for requesting the JWT exchange for Azure OIDC

defaults:
  run:
    working-directory: v2

env:
  TOFU_PATH: v2
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Included here to override behavior of the terraform azurerm backend behavior
  # Which by default we have configured to use user azuread
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true


jobs:
  plan:
    name: 'OpenTofu Plan'
    runs-on: ubuntu-latest
    environment: 'production'
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the OpenTofu CLI
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_wrapper: false

    - name: OpenTofu fmt
      id: fmt
      run: tofu fmt -check
      continue-on-error: true

    - name: OpenTofu Init
      id: init
      run: tofu init

    - name: OpenTofu Validate
      id: validate
      run: tofu validate -no-color

    # Generates an execution plan for OpenTofu
    - name: OpenTofu Plan
      id: plan
      run: tofu plan -var-file="${{ inputs.stage }}.tfvars" -out "${{ inputs.stage }}-tfplan"

    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: '${{ inputs.stage }}-tfplan'
        path: 'v2/${{ inputs.stage }}-tfplan'
  
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(tofu show -no-color '${{ inputs.stage }}-tfplan')
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          
  apply:
    name: 'OpenTofu Apply'
    if: ${{ inputs.tofu_action == 'apply' }}
    needs: [plan]
    runs-on: ubuntu-latest
    environment: 'production'
    
    steps:
    - uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: zbguza

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_wrapper: false

    - name: OpenTofu Init
      id: init
      run: tofu init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: '${{ inputs.stage }}-tfplan'
        path: v2

    # - name: "Login via Azure CLI"
    #   uses: azure/login@v2
    #   with:
    #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
    # Terraform Apply
    - name: OpenTofu Apply
      run: tofu apply -auto-approve '${{ inputs.stage }}-tfplan'
